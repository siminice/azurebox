apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'

sourceCompatibility = 1.6

version = '1.0.0-SNAPSHOT'
group = 'org.vbossica'

ext {
  projectUrl = 'http://github.com/vbossica/azurebox'
  years = '2013-2014'

  azureVersion = '0.4.2'
  junitVersion = '4.11'
  qpidVersion = '0.20'
  springVersion = '3.2.2.RELEASE'
}

repositories {
  mavenCentral()
}

configurations {
  provided
  testCompile.extendsFrom(provided)
}

dependencies {
  compile gradleApi()

  provided "com.microsoft.windowsazure:microsoft-windowsazure-api:${azureVersion}",
           "org.apache.qpid:qpid-client:${qpidVersion}",
           "org.apache.qpid:qpid-amqp-1-0-client-jms:${qpidVersion}",
           "org.springframework:spring-context:${springVersion}"

  testCompile "junit:junit-dep:${junitVersion}",
              "org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.0",
              "org.springframework:spring-beans:${springVersion}",
              "org.springframework:spring-jms:${springVersion}",
              "org.springframework:spring-test:${springVersion}"
}

sourceSets {
  main {
    compileClasspath += configurations.provided
  }
}

test {
  exclude '**/*IT.class'
}

javadoc {
  classpath = configurations.provided
  options.overview = "src/main/java/overview.html"
}

task sourcesJar(type: Jar, dependsOn:classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: "${azureboxRepoUrl}") {
        authentication(userName: "${azureboxRepoUsername}", password: "${azureboxRepoPassword}")
      }
      pom.project {
        name 'azure - utility classes for Azure'
        inceptionYear years
        url projectUrl

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
      }
    }
  }
}

tasks.idea.dependsOn(cleanIdea)
idea {
  module {
    excludeDirs += file('.settings')
    scopes.PROVIDED.plus += configurations.provided
  }
  project.ipr {
    withXml { provider ->
      def component = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }
      component.mapping.@directory = '$PROJECT_DIR$'
      component.mapping.@vcs = 'Git'
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}
